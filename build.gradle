import groovy.xml.QName

apply plugin: 'java'
apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

repositories {
    mavenCentral()
}

ext {
    apacheCxfVersion = '3.0.5'
    copperVersion = '4.3.0-alpha1'
}


compileJava.options.encoding = 'utf-8'
compileJava.sourceCompatibility = JavaVersion.VERSION_1_7
compileJava.targetCompatibility = JavaVersion.VERSION_1_7
compileTestJava.options.encoding = 'utf-8'
compileTestJava.sourceCompatibility = JavaVersion.VERSION_1_7
compileTestJava.targetCompatibility = JavaVersion.VERSION_1_7


sourceSets {
    workflow {
        ext.srcDir = "$projectDir/src/workflow/java"
    }
}
sourceSets.main.resources.srcDirs += sourceSets.workflow.srcDir
configurations {
    wsgen
}

sourceSets {
    schema {
        ext.srcDir = "$projectDir/src/main/schema"
    }
}
sourceSets.main.resources.srcDirs += sourceSets.schema.srcDir

dependencies {
    compile "org.copper-engine:copper-coreengine:$copperVersion"
    compile "org.copper-engine:copper-jmx-interface:$copperVersion"
    compile "org.copper-engine:copper-spring:$copperVersion"
    
    compile("org.apache.cxf:cxf-rt-transports-http-jetty:$apacheCxfVersion") {
        exclude module: 'spring-web'
        exclude group: "asm", module: "asm"
    }
    compile("org.apache.cxf:cxf-rt-frontend-jaxws:$apacheCxfVersion") {
        exclude module: 'spring-web'
        exclude group: "asm", module: "asm"
    }
    compile 'org.eclipse.jetty:jetty-server:8.+'
    runtime 'org.apache.derby:derby:10.13.1.1'
    runtime "org.slf4j:slf4j-log4j12:1.7.21"

    wsgen "org.apache.cxf:cxf-tools-wsdlto-core:$apacheCxfVersion"
    wsgen "org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:$apacheCxfVersion"
    wsgen "org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:$apacheCxfVersion"
    wsgen "org.apache.cxf.xjcplugins:cxf-xjc-ts:$apacheCxfVersion"
    
}

task("gen_wsbindings") {
    ext.genDirName = "$projectDir/src/main/generated";

    inputs.dir file(sourceSets.schema.srcDir)
    outputs.dir file(ext.genDirName)

    doFirst {
        file(ext.genDirName).mkdirs()
    }
    doLast {
        fileTree(dir: sourceSets.schema.srcDir + "/wsdl", include: "**/*.wsdl", exclude: "common.wsdl").each {
            def wsdlFile ->
                javaexec {
                    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
                    classpath = configurations.wsgen
                    // Add -DexitOnFinish=true so that WSDLToJava bails out with exit code 0 (on success) or 1 (on failure)
                    // so that the build aborts immediately on errors. If you don't set this property, the exit code is always 0.
                    systemProperty 'exitOnFinish', 'true'
                    jvmArgs = ['-Djavax.xml.accessExternalSchema=all']
                    args = ['-frontend', 'jaxws21',
                            '-db', 'jaxb',
                            '-xjc-extension',
                            '-impl', '-server', '-client', '-validate',
                            '-d', ext.genDirName,
                            '-wsdlLocation', 'classpath:wsdl/' + wsdlFile.name,
                            wsdlFile]
                }
        }
    }
}
sourceSets.main.java.srcDirs += gen_wsbindings.genDirName

compileJava.dependsOn gen_wsbindings
eclipseClasspath.dependsOn gen_wsbindings


clean {
    delete "$projectDir/src/main/generated"
}

jar {
    manifest.attributes provider: 'gradle'
}

javadoc {
    options.encoding = "UTF-8"
}


task runHello (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.simple.HelloWorldTestApplication"
}

task runEngine (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.engine.OrchestrationEngine"
}

task runEngineWithMonitoring (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.enginemon.OrchestrationEngineWithMonitoring"
}

task runService (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.simulators.servers.ServiceSimulatorMain"
}

task sendMessage (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.simulators.clients.OrchestrationServiceTestClient"
    args = ["http://localhost:9090/services/orchestration?wsdl","491716677889","sc00p"]
}

task fireMessages (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.simulators.clients.OrchestrationServiceLoadTestClient"
    args = ["http://localhost:9090/services/orchestration?wsdl"]
}

// be sure to always regenerate eclipse files, because default behavior is merging into existing files
tasks.eclipse.dependsOn cleanEclipse

eclipse {
    classpath {
        defaultOutputDir = file('build')
    }
    jdt {
        file {
            // add our code style settings to every eclipse project
            withProperties { properties ->
                def codestyle = new XmlParser().parse(file("$rootDir/config/eclipse-codestyle.xml"))
                codestyle.profile[0].setting.each {
                    properties.put(it.'@id', it.'@value')
                }
            }
            whenMerged {
                def uiprops = new Properties();
                uiprops.put('eclipse.preferences.version', '1')
                uiprops.put('formatter_profile', '_SCOOP-CodeStyle')
                uiprops.put('formatter_settings_version', '12')
                uiprops.store(file("$projectDir/.settings/org.eclipse.jdt.ui.prefs").newWriter(), "generated by build.gradle")
            }
        }
    }
}

